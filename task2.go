//2.Написать программу, которая конкурентно рассчитает значение квадратов чисел взятых из массива
//(2,4,6,8,10) и выведет их квадраты в stdout.

// без учёта последовательности по заданию
package main

import (
	"fmt"
	"sync"
)

func main() {

	// По условию 2 таска массив заданной длинны с известными элементами
	numbers := [5]int{2, 4, 6, 8, 10}

	//Канал для передачи в него результатов выполнения и дальнейшей передачи в осн горутингу
	// буфер 5
	resultChannel := make(chan int, 5)

	// Используем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// горутина для каждого элемента массива
	for _, num := range numbers {
		wg.Add(1)                             // Увеличиваем счётчик wg
		go toSquare2(num, resultChannel, &wg) // Запуск функции, вычисляющей квадрат в горутине
	}

	//горутина для закрытия канала после работы всех горутин, вычисляющих квадрат
	go func() {
		wg.Wait()            // Ждём завершения всех горутин, поа "счётчик" не станет 0
		close(resultChannel) // закрытие канала чтобы небыло дэдлока
	}() // скобки для вызова анон функции в горутине

	// Читаем результаты из канала и выводим в stdout
	for result := range resultChannel {
		fmt.Printf("%d ", result)
	}

}

func toSquare2(number int, resultChannel chan<- int, wg *sync.WaitGroup) {
	defer wg.Done() // Уменьшаем счетчик при завершении горутины
	squared := number * number
	resultChannel <- squared // Записываем результат в канал
}
